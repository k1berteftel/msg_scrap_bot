import os
from aiogram import Bot
from aiogram.types import Message, User, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
from aiogram_dialog import DialogManager
from aiogram_dialog.widgets.kbd import Button, Select
from aiogram_dialog.widgets.input import ManagedTextInput
from pyrogram import Client
from pyrogram.types import SentCode
from pyrogram.errors import PasswordHashInvalid
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from database.db_conf import database
from states.state_groups import startSG
from utils.pars_functions import get_messages, get_table


api_id = 9238838
api_hash = 'b65e9edfabe1c645a0d101543f065e89'
db = database('datas')


async def channel_selector(clb: CallbackQuery, widget: Select, dialog_manager: DialogManager, item_id: str):
    chats: list[tuple[str]] = dialog_manager.dialog_data.get('chats')
    for chat in chats:
        if chat[0] == int(item_id):
            db.del_chat(chat[1])
    await clb.answer('–ö–∞–Ω–∞–ª –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω')


async def chats_del_getter(dialog_manager: DialogManager, **kwargs):
    chats = db.get_chats_show()
    text = '–í–≤–µ–¥–∏—Ç–µ –∫–∞–Ω–∞–ª –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —É–¥–∞–ª–∏—Ç—å\n\n'
    chat_buttons = []
    if chats:
        for chat in chats:
            chat_buttons.append((chat[1], chat[0]))
            text += f'{chat[0]}: {chat[1]}\n'
    else:
        text = '–ö–∞–Ω–∞–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç'
    dialog_manager.dialog_data['chats'] = chats
    return {'channels': text,
            'items': chat_buttons}


async def get_channel(message: Message, widget: ManagedTextInput, dialog_manager: DialogManager, text: str):
    try:
        chat = int(text)
    except Exception as err:
        try:
            chat = text.split('/')[-1]
        except Exception as err:
            await message.answer('–í–≤–µ–¥–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–µ–≤–µ—Ä–µ–Ω')
            return
    db.add_chat(str(chat))
    await message.answer('–ö–∞–Ω–∞–ª –±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω')
    await dialog_manager.switch_to(startSG.channels_menu)


async def chats_menu_getter(dialog_manager: DialogManager, **kwargs):
    chats = db.get_chats()
    count = 1
    text = ''
    if chats:
        for chat in chats:
            text += f'{count}: {chat[0]}\n'
            count += 1
    else:
        text = '–ö–∞–Ω–∞–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç'
    return {'channels': text}


async def get_ratio(message: Message, widget: ManagedTextInput, dialog_manager: DialogManager, text: str):
    bot: Bot = dialog_manager.middleware_data.get('bot')
    scheduler: AsyncIOScheduler = dialog_manager.middleware_data.get('scheduler')
    try:
        ratio = float(text)
    except Exception:
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        return
    account = db.get_account(message.from_user.id)
    if not account:
        await message.answer('–£ –≤–∞—Å –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞')
        return
    chats = db.get_chats()
    if not chats:
        await message.answer('–ù–µ—Ç—É —á–∞—Ç–æ–≤ –¥–ª—è —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –¥–æ–±–∞–≤—å—Ç–µ —á–∞—Ç—ã –ø–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –Ω–∞—á–∏–Ω–∞—Ç—å —Å–±–æ—Ä')
        return
    channels = []
    for chat in chats:
        try:
            chat = int(chat[0])
            channels.append(chat)
        except Exception as err:
            channels.append(chat[0])
            print(err)
    await message.answer('–ù–∞—á–∞–ª—Å—è –ø–æ–∏—Å–∫, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–∂–∏–¥–∞–π—Ç–µ')
    if not scheduler.get_job(job_id=str(message.from_user.id)):
        print('scheduler start work')
        scheduler.add_job(get_messages, 'interval',
                          args=[account, ratio, channels, bot, scheduler, message], minutes=10, id=str(message.from_user.id))
    #messages = await get_messages(account, ratio, channels, bot, scheduler, message.from_user.id)

    reply_keyboard = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text='–û—Ç–∫–ª—é—á–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫')]], resize_keyboard=True)
    await message.answer('–ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∏—Å–∫–∞ –±—ã–ª –∑–∞–ø—É—â–µ–Ω, –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç –±–æ—Ç –±—É–¥–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ—Å—Ç–æ–≤', reply_markup=reply_keyboard)
    await dialog_manager.switch_to(startSG.start)
    return
    #await message.answer(f'‚≠êÔ∏è{msg[0]}|‚ù§Ô∏è{msg[1]}|‚úàÔ∏è{msg[2]}|üëç{msg[3]}|üëÄ{msg[4]}|üîó<a href="{msg[5]}">—Å—Å—ã–ª–∫–∞</a>', disable_notification=True, disable_web_page_preview=True)
    #messages.insert(0, ['—Ä–µ–ø–æ—Å—Ç—ã / –ø—Ä–æ—Å–º–æ—Ç—Ä—ã', '—Ä–µ–∞–∫—Ü–∏–∏ / –ø—Ä–æ—Å–º–æ—Ç—Ä—ã', '—Ä–µ–ø–æ—Å—Ç—ã', '—Ä–µ–∞–∫—Ü–∏–∏', '–ø—Ä–æ—Å–º–æ—Ç—Ä—ã', '—Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç'])


async def del_account(clb: CallbackQuery, button: Button, dialog_manager: DialogManager):
    account = db.get_account(user_id=clb.from_user.id)
    db.del_account(clb.from_user.id)
    try:
        os.remove(account)
    except Exception as err:
        print(err)
    await dialog_manager.switch_to(state=startSG.accounts)


async def check_account_del(clb: CallbackQuery, button: Button, dialog_manager: DialogManager):
    if not db.get_account(clb.from_user.id):
        await clb.answer('–£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è')
        return
    await dialog_manager.switch_to(state=startSG.del_account)


async def check_account(clb: CallbackQuery, button: Button, dialog_manager: DialogManager):
    if db.get_account(clb.from_user.id):
        await clb.answer('–í—ã —É–∂–µ –∏–º–µ–µ—Ç–µ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç')
        return
    await dialog_manager.switch_to(state=startSG.add_account)


async def phone_get(message: Message, widget: ManagedTextInput, dialog_manager: DialogManager, text: str):
    client = Client(f'{message.from_user.id}', api_id, api_hash)
    await client.connect()
    print(text, type(text))
    try:
        sent_code_info: SentCode = await client.send_code(text.strip())
    except Exception as err:
        print(err)
        await message.answer('–í–µ–¥–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ–≤–µ—Ä–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
        return
    dialog_manager.dialog_data['client'] = client
    dialog_manager.dialog_data['phone_info'] = sent_code_info
    dialog_manager.dialog_data['phone_number'] = text
    await dialog_manager.switch_to(state=startSG.kod_send)


async def get_kod(message: Message, widget: ManagedTextInput, dialog_manager: DialogManager, text: str):
    client: Client = dialog_manager.dialog_data.get('client')
    phone_info: SentCode = dialog_manager.dialog_data.get('phone_info')
    phone = dialog_manager.dialog_data.get('phone_number')
    code = ''
    if len(text.split('-')) != 5:
        await message.answer(text='–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∫–æ–¥ –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–µ—Å—Ç–∏ –∫–æ–¥ —Å–Ω–æ–≤–∞')
        return
    for number in text.split('-'):
        code += number
    print(code)
    try:
        await client.sign_in(phone, phone_info.phone_code_hash, code)
        await client.disconnect()
        db.add_account(message.from_user.id, account=str(message.from_user.id))
        dialog_manager.dialog_data.clear()
        await dialog_manager.switch_to(state=startSG.accounts)
    except Exception as err:
        print(err)
        await dialog_manager.switch_to(state=startSG.password)


async def get_password(message: Message, widget: ManagedTextInput, dialog_manager: DialogManager, text: str):
    client: Client = dialog_manager.dialog_data.get('client')
    phone_info = dialog_manager.dialog_data.get('phone_info')
    phone = dialog_manager.dialog_data.get('phone_number')

    try:
        await client.check_password(text)
        await client.disconnect()
        db.add_account(message.from_user.id, account=str(message.from_user.id))
        await message.answer(text='–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω')
        dialog_manager.dialog_data.clear()
        await dialog_manager.switch_to(state=startSG.accounts)
    except PasswordHashInvalid as err:
        print(err)
        await message.answer(text='–í–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞')
        await dialog_manager.switch_to(state=startSG.add_account)
